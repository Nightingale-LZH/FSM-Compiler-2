fsm_func    : "FSM" WORD "(" ")" statement              -> fsm_func

statement   : "FOR" "(" partialstmt ";" expression ";" partialstmt ")" statement    -> statement_for
            | "WHILE" "(" expression ")" statement                      -> statement_while
            | "DO" statement "WHILE" "(" expression ")"                 -> statement_do_while
            | "IF" "(" expression ")" statement "ELSE" statement        -> statement_if_else
            | "IF" "(" expression ")" statement                         -> statement_if

            | "if" "(" expression ")" statement "else" statement                    -> statement_ordinary
            | "if" "(" expression ")" statement                                     -> statement_ordinary
            | "for" "(" partialstmt ";" expression ";" partialstmt ")" statement    -> statement_ordinary
            | "while" "(" expression ")" statement                                  -> statement_ordinary
            | "do" "{" statement* "}" "while" "(" expression ")" ";"                -> statement_ordinary
            | "switch" "(" expression ")" "{" switchstmt* "}"                       -> statement_ordinary
            | ";"                                                                   -> statement_ordinary // Empty stmt

            | "{" statement* "}"                        -> statement_block
            | partialstmt ";"                           -> statement_partial


switchstmt  : "case" expression ":"     -> switchstmt
            | "default" ":"             -> switchstmt
            | statement                 -> switchstmt

partialstmt : declaration                               -> partialstmt_declaration
            | "YIELD"                                   -> partialstmt_yield
            | "WAIT" "(" expression ")"                 -> partialstmt_wait
            | "WAIT_UNLESS" "(" expression ")"          -> partialstmt_wait_until
            | assignment                                -> partialstmt
            | expression                                -> partialstmt

declaration : "GLOBAL" expression name "=" expression   -> declaration_initialization_global
            | "GLOBAL" expression name                  -> declaration_global
            | expression name "=" expression            -> declaration_initialization
            | expression name "(" expr_block ")"        -> declaration_class_init
            | expression name "{" expr_block "}"        -> declaration_class_init
            | expression name                           -> declaration

assignment  : name ASSIGN expression                    -> assignment

expression  : name? "(" expr_block")" -> expression_bracket
            | name? "[" expr_block "]"                  -> expression_bracket
            | "{" expr_block "}"                        -> expression_bracket
            | expression BIN_OPTR expression            -> expression
            | PRE_U_OPTR expression                     -> expression
            | expression POST_U_OPTR                    -> expression
            | literal                                   -> expression_literal   

expr_block  : [expression ("," expression)*]            -> expr_block             

literal     : string    -> literal_string
            | char      -> literal_char
            | name      -> literal_name
            | boolean   -> literal_boolean

name        : name "." WORD     -> name
            | name "::" WORD    -> name
            | name "<" expression ">" -> name
            | name WORD         -> name
            | WORD              -> name

string      : "\"" STRCHAR* "\""    -> string
char        : "'" STRCHAR "'"       -> char
boolean     : "true" | "false"      -> boolean


ASSIGN      : "+=" | "-=" | "*=" | "/=" | "%=" 
            | ">>=" | "<<=" | "&=" | "^=" | "|=" 
            | "="

BIN_OPTR    : "+" | "-" | "*" | "/" | "%" 
            | "==" | "!=" | ">" | "<" | ">=" | "<="
            | "&&" | "||" 
            | "?" | ":" 
            | "&" | "|" | "^" |  "<<" | ">>"

PRE_U_OPTR  : "!" | "~" | "-" | "++" | "--" 

POST_U_OPTR : "++" | "--" 

STRCHAR     : /([^"\\]|(\\.))/

// exclude the keywords, make the grammar more stable
WORD        : /(?!\b(FSM|FOR|WHILE|DO|IF|ELSE|if|else|for|while|do|switch|case|default|YIELD|WAIT|WAIT_UNLESS|GLOBAL|true|false)\b)[a-zA-Z0-9_]+/

COMMENT     : /\/\/.*/

%import common.WS
%ignore WS
%ignore COMMENT